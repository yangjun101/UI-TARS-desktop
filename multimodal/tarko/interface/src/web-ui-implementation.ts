/* eslint-disable @typescript-eslint/no-explicit-any */
/*
 * Copyright (c) 2025 Bytedance, Inc. and its affiliates.
 * SPDX-License-Identifier: Apache-2.0
 */

/**
 * Agent Web UI implementation type
 *
 * - `static`: local static directory.
 * - `remote`: remote web ui implementation.
 */
export type AgentWebUIImplementationType = 'static' | 'remote';

/**
 * Navigation item icon type
 */
export type WorkspaceNavItemIcon =
  | 'code'
  | 'monitor'
  | 'terminal'
  | 'browser'
  | 'desktop'
  | 'default';

/**
 * Navigation item configuration for workspace
 */
export interface WorkspaceNavItem {
  /**
   * Navigation item title displayed on the button
   */
  title: string;
  /**
   * Link URL to open in new tab
   */
  link: string;
  /**
   * Icon type for the navigation item
   * @defaultValue 'default'
   */
  icon?: WorkspaceNavItemIcon;
}

/**
 * Layout mode configuration
 */
export type LayoutMode = 'default' | 'narrow-chat';

/**
 * Layout configuration options
 */
export interface LayoutConfig {
  /**
   * Default layout mode
   * @defaultValue 'default'
   */
  defaultLayout?: LayoutMode;
  /**
   * Enable layout switch button in toolbar
   * @defaultValue false
   */
  enableLayoutSwitchButton?: boolean;
  /**
   * Enable sidebar display
   * @defaultValue true
   */
  enableSidebar?: boolean;
  /**
   * Enable home route registration
   * @defaultValue true
   */
  enableHome?: boolean;
}

/**
 * Workspace configuration options
 */
export interface WorkspaceConfig {
  /**
   * Navigation items to display in the workspace header
   */
  navItems?: WorkspaceNavItem[];
}

/**
 * GUI Agent configuration for web UI
 */
export interface TarkoWebUIGUIAgentConfig {
  /**
   * Default GUI Agent screenshot rendering strategy
   *
   * - `both`: Default to display both before and after screenshots for action comparison
   * - `beforeAction`: Default to display only beforeAction screenshot, suitable for agents that take screenshots in onEachAgentLoopStart (e.g., Agent-TARS)
   * - `afterAction`: Default to display only afterAction screenshot, suitable for agents that take screenshots in onEachAgentLoopEnd (e.g., Omni-TARS)
   *
   * Note: Mouse cursor overlay is only rendered on beforeAction screenshots as it indicates where the action will be performed
   *
   * @defaultValue 'afterAction'
   */
  defaultScreenshotRenderStrategy?: 'both' | 'beforeAction' | 'afterAction';
  /**
   * Whether to enable runtime screenshot rendering strategy switch
   *
   * When enabled, users can dynamically switch between different screenshot display modes (both/beforeAction/afterAction)
   * during runtime through UI controls. When disabled, only the default strategy is used.
   *
   * @defaultValue false
   */
  enableScreenshotRenderStrategySwitch?: boolean;
  /**
   * Whether to enable GUI Agent action rendering
   *
   * Since actions are generated by the GUI Agent model based on beforeActionImage,
   * by design, GUI actions should only be rendered on BeforeActionImage.
   * When set to false, it will hide the GUI operation details card (thinking process, steps, action commands, etc.)
   *
   * @defaultValue true
   */
  renderGUIAction?: boolean;
  /**
   * Whether to render browser shell around screenshots
   *
   * - `true`: Display screenshots wrapped in browser shell UI
   * - `false`: Display screenshots directly without browser shell, suitable for screenshots that already contain browser chrome or computer use scenarios
   *
   * @defaultValue true
   */
  renderBrowserShell?: boolean;
}

/**
 * Base agent implementation interface
 */
export interface BaseAgentWebUIImplementation {
  /**
   * Agent implementation type
   *
   * @defaultValue static
   */
  type?: AgentWebUIImplementationType;
  /**
   * Web UI Logo
   *
   * @defaultValue Tarko logo
   */
  logo?: string;
  /**
   * Web UI site title, usually displayed in the upper right corner of the navbar
   * also used in meta.
   *
   * @defaultValue Agent Name
   */
  title?: string;
  /**
   * Web UI Sub title
   *
   * @defaultValue Agent Subtitle, Subtitle, for Home or SEO
   */
  subtitle?: string;
  /**
   * Web UI hero title, usually displayed on the home page, The project's positioning
   * and welcome message, telling people your positioning
   */
  welcomTitle?: string;
  /**
   * Welcome prompts
   */
  welcomePrompts?: string[];
  /**
   * Enable contextual file selector with @ syntax
   * When enabled, users can type @ in the input to search and select workspace files/directories
   *
   * @defaultValue false
   */
  enableContextualSelector?: boolean;
  /**
   * Base path for routing deployment
   * Supports both static paths and regex patterns
   *
   * @example
   * base: "/agent-ui"           // Static path
   * base: "/tenant-.+"         // Regex pattern
   * base: "/(foo|bar)/app"     // Regex with groups
   */
  base?: string;
  /**
   * Workspace configuration
   */
  workspace?: WorkspaceConfig;
  /**
   * Layout configuration
   */
  layout?: LayoutConfig;
  /**
   * GUI Agent configuration for web UI
   */
  guiAgent?: TarkoWebUIGUIAgentConfig;
}

/**
 * Static implementation
 */
export interface StaticAgentWebUIImplementation extends BaseAgentWebUIImplementation {
  type?: 'static';
  /**
   * Web UI Static Path, example implementation: `@tarko/agent-ui`.
   */
  staticPath: string;
}

/**
 * Remote implementation (TODO)
 */
export interface RemoteAgentWebUIImplementation extends BaseAgentWebUIImplementation {
  type?: 'remote';
  remoteUrl?: string;
}

/**
 * Union type for all agent implementations
 */
export type AgentWebUIImplementation =
  | StaticAgentWebUIImplementation
  | RemoteAgentWebUIImplementation;

/**
 * Utility type to extract implementation by type
 */
export type AgentWebUIImplementationByType<T extends AgentWebUIImplementationType> =
  T extends 'static'
    ? StaticAgentWebUIImplementation
    : T extends 'remote'
      ? RemoteAgentWebUIImplementation
      : never;

/**
 * Type guard to check if implementation is of specific type
 */
export function isAgentWebUIImplementationType<T extends AgentWebUIImplementationType>(
  implementation: AgentWebUIImplementation,
  type: T,
): implementation is AgentWebUIImplementationByType<T> {
  return implementation.type === type;
}
